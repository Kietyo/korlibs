---
/*
//#include <intrin.h>

typedef int i32;
typedef long long int i64;

__thread unsigned long long miniffi_ireg[4] = {0};
__thread float miniffi_freg[16] = {0};
__thread i32 miniffi_params[1024] = {0};
__thread int miniffi_pos = 0;
__thread int miniffi_ipos = 0;
__thread int miniffi_fpos = 0;

int miniffi_start() {
    miniffi_pos = 0;
    miniffi_ipos = 0;
    miniffi_fpos = 0;
}

void miniffi_push_i32(i32 value) {
    if (miniffi_ipos < 4) {
        miniffi_ireg[miniffi_ipos++] = value;
        return;
    }
    miniffi_params[miniffi_pos++] = value;
}
void miniffi_push_i64(i64 value) {
    if (miniffi_ipos < 4) {
        miniffi_ireg[miniffi_ipos++] = value;
        return;
    }
    *(i64 *)&miniffi_params[miniffi_pos] = value;
    miniffi_pos += 2;
}


// https://en.wikipedia.org/wiki/X86_calling_conventions
int miniffi_call(i64 ptr_address) {
    //mini_ffi_params[miniffi_pos++] = value;
    unsigned long long rsp;
    unsigned long long rsp2;
    __asm__ ("mov %%rsp, %0" : "=r"(rsp));
    rsp2 = rsp - miniffi_pos * 4;
    __asm__ ("mov %0, rsp" : "=r"(rsp2));
    __asm__ ("mov %0, rsp" : "=r"(rsp));

    printf("Stack Pointer (RSP): %p\n", rsp);
    return -1;
}
*/

/*
unsigned long miniffi_getrsp() {
    unsigned long rsp;
    __asm__ ("mov %%rsp, %0" : "=r"(rsp));
    return rsp;
}
*/
